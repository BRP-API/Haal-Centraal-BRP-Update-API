"""
    BRP Update API

    Met deze API kun je opvragen welke door jou gevolgde personen zijn gewijzigd in de BRP. Je kunt je abonneren op een persoon die je wilt volgen, en je kunt opvragen welke personen door jou worden gevolgd. Je kunt deze API gebruiken in combinatie met de BRP bevragen API, bijvoorbeeld om lokale kopiegegevens actueel te houden.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.bad_request_foutbericht import BadRequestFoutbericht
from openapi_client.model.foutbericht import Foutbericht
from openapi_client.model.volgindicatie import Volgindicatie
from openapi_client.model.volgindicatie_collectie import VolgindicatieCollectie
from openapi_client.model.volgindicatie_raadplegen import VolgindicatieRaadplegen


class BeherenVolgindicatiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_volgindicatie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Raadpleeg een volgindicatie op een persoon  # noqa: E501

            Vraag een volgindicatie op van een specifieke persoon.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_volgindicatie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (bool, date, datetime, dict, float, int, list, str, none_type): Identificerend gegeven van een ingeschreven natuurlijk persoon, als bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolgindicatieRaadplegen
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.get_volgindicatie = Endpoint(
            settings={
                'response_type': (VolgindicatieRaadplegen,),
                'auth': [],
                'endpoint_path': '/volgindicaties/{burgerservicenummer}',
                'operation_id': 'get_volgindicatie',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_volgindicatie
        )

        def __get_volgindicaties(
            self,
            **kwargs
        ):
            """Raadpleeg actieve volgindicaties  # noqa: E501

            Vraag de actieve volgindicaties op van een abonnee. Levert geen volgindicaties met einddatum vandaag of in het verleden.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_volgindicaties(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolgindicatieCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_volgindicaties = Endpoint(
            settings={
                'response_type': (VolgindicatieCollectie,),
                'auth': [],
                'endpoint_path': '/volgindicaties',
                'operation_id': 'get_volgindicaties',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_volgindicaties
        )

        def __upsert_volgindicatie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Plaats, wijzig of beëindig een volgindicatie  # noqa: E501

            Plaats, wijzig of beëindig een volgindicatie op een specifieke persoon. Als je de persoon nog niet volgt, wordt een volgindicatie geplaatst. Als je de persoon al wel volgt, wordt de volgindicatie gewijzigd. Verwijder de einddatum van een volgindicatie door in de request body een leeg object { } te sturen. Beëindig een volgindicatie door een einddatum gelijk aan de datum van vandaag te sturen.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upsert_volgindicatie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (bool, date, datetime, dict, float, int, list, str, none_type): Identificerend gegeven van een ingeschreven natuurlijk persoon, als bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer.

            Keyword Args:
                volgindicatie (Volgindicatie): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolgindicatieRaadplegen
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.upsert_volgindicatie = Endpoint(
            settings={
                'response_type': (VolgindicatieRaadplegen,),
                'auth': [],
                'endpoint_path': '/volgindicaties/{burgerservicenummer}',
                'operation_id': 'upsert_volgindicatie',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'volgindicatie',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'volgindicatie':
                        (Volgindicatie,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'volgindicatie': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__upsert_volgindicatie
        )
